name: Docker GitOps Workflow

on:
  # Déclenchement sur push vers certaines branches
  push:
    branches:
      - 'main'
      - 'develop'
  schedule:
    - cron: '0 0 * * *'

env:
  DOCKER_IMAGE_NAME: mathieuawels/openwebui-awels

jobs:
  build-and-push:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete contents of 'app' directory except critical files
        shell: bash
        run: |
          find app -type f ! -name 'package.json' ! -name 'Dockerfile' -print0 | while IFS= read -r -d $'\0' file; do
            rm -f "$file"
          done
          find app -type d -empty -print0 | while IFS= read -r -d $'\0' dir; do
            rmdir "$dir"
          done


      - name: Copy 'custom-app' to 'app'
        run: cp -r custom-app/. app/
        
      - name: Verify 'app' Directory
        run: |
          if [ ! -d "app" ]; then
            echo "Error: 'app' directory not found."
            exit 1
          fi

      - name: Checkout OpenWebUI
        uses: actions/checkout@v4
        with:
          repository: open-webui/open-webui
          ref: main
          path: open-webui
          fetch-depth: 0

      - name: Merge OpenWebUI into 'app' (excluding conflicts)
        run: |
          rsync -av --delete \
            --exclude='static/favicon.png' \
            --exclude='static/opensearch.xml' \
            --exclude='src/lib/constants.ts' \
            --exclude='backend/open_webui/static/favicon.ico' \
            --exclude='backend/open_webui/static/favicon.png' \
            --exclude='static/static/*' \
            --exclude='src/lib/components/layout/Sidebar/UserMenu.svelte' \
            --exclude='config.js' \
            --exclude='generate-config.sh' \
            --exclude='Dockerfile' \
            --exclude='src/app.html' \
            --exclude='update_ollama_models.sh' \
            open-webui/ app/

      - name: Verify 'app' Directory After Merge
        run: |
          if [ ! -d "app" ]; then
            echo "Error: 'app' directory not found after merge."
            exit 1
          fi

      - name: Verify required files
        run: |
          if [ ! -f "app/package.json" ]; then
            echo "Error: package.json file is missing in 'app/' directory."
            exit 1
          fi
          
      - name: Show app/ contents
        run: tree app/ || ls -R app/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version app/package.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Specify the required Node.js version
          
      - name: Install Dependencies and Build
        run: |
          # Change directory to where package.json is located
          cd app
          # Ensure dependencies are installed
          npm install
          # Build the application to generate the 'build' directory
          npm run build
          # Verify the 'build' directory exists
          if [ ! -d "build" ]; then
            echo "Error: 'build' directory not found after build step."
            exit 1
          fi
        working-directory: app
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: app  # Utiliser le répertoire "app" comme contexte de build
          file: app/Dockerfile # Spécifier le Dockerfile dans le répertoire "app"
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest,${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
